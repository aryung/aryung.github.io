<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>haskell on AC分享小站</title><link>https://aryung.github.io/tags/haskell/</link><description>Recent content in haskell on AC分享小站</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><lastBuildDate>Thu, 26 May 2022 18:29:06 +0800</lastBuildDate><atom:link href="https://aryung.github.io/tags/haskell/index.xml" rel="self" type="application/rss+xml"/><item><title>what is monad by Haskell</title><link>https://aryung.github.io/posts/what-is-monad-by-haskell/</link><pubDate>Thu, 26 May 2022 18:29:06 +0800</pubDate><guid>https://aryung.github.io/posts/what-is-monad-by-haskell/</guid><description>楔子 Monad 是一個數學特性，來看看純的 Haskell 語言怎看待，使用「除法」來做一個簡單的示範說明。
Monads 這是一個 Haskell 基本的語法，宣告一個 Expre 的格式，他有可能是 Int (Val type) ，也有可能是 Div
data Expr = Val Int | Div Expr Expr eval :: Expr -&amp;gt; Int eval (Val n) = n eval (Div x y) = eval x `div` eval y eval (Div (Val 1) (Val 0)) safediv :: Int -&amp;gt; Int -&amp;gt; Maybe Int safediv _ 0 = Nothing safediv n m = Just (n ‘div‘ m) eval :: Expr -&amp;gt; Maybe Int eval (Val n) = Just n eval (Div x y) = case eval x of Nothing -&amp;gt; Nothing Just n -&amp;gt; case eval y of Nothing -&amp;gt; Nothing Just m -&amp;gt; safediv n m eval :: Expr -&amp;gt; Maybe Int eval (Val n) = pure n eval (Div x y) = pure safediv &amp;lt;*&amp;gt; eval x &amp;lt;*&amp;gt; eval y (&amp;gt;&amp;gt;=) :: Maybe a -&amp;gt; (a -&amp;gt; Maybe b) -&amp;gt; Maybe b mx &amp;gt;&amp;gt;= f = case mx of Nothing -&amp;gt; Nothing Just x -&amp;gt; f x eval :: Expr -&amp;gt; Maybe Int eval (Val n) = Just n eval (Div x y) = eval x &amp;gt;&amp;gt;= \n -&amp;gt; eval y &amp;gt;&amp;gt;= \m -&amp;gt; safediv n m m1 &amp;gt;&amp;gt;= \x1 -&amp;gt; m2 &amp;gt;&amp;gt;= \x2 -&amp;gt; .</description></item></channel></rss>