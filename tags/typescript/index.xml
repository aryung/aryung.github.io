<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>typescript on AC 分享小站</title><link>https://aryung.github.io/tags/typescript/</link><description>Recent content in typescript on AC 分享小站</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><lastBuildDate>Sun, 22 May 2022 09:30:06 +0800</lastBuildDate><atom:link href="https://aryung.github.io/tags/typescript/index.xml" rel="self" type="application/rss+xml"/><item><title>Arrow function generic types</title><link>https://aryung.github.io/posts/2022-05-22-arrow-function-generic-types/</link><pubDate>Sun, 22 May 2022 09:30:06 +0800</pubDate><guid>https://aryung.github.io/posts/2022-05-22-arrow-function-generic-types/</guid><description>楔子 Arrow Function 很常使用，但它的 Generic Type 有點不太好記，列舉一下幾種
Generic Arrow Functions 正常的函數 Generice Type 的格式
function firstOrNull&amp;lt;T&amp;gt;(arr: T[]): T | null { return arr.length === 0 ? null : arr[0]; } General const firstOrNull = &amp;lt;T&amp;gt;( arr: T[] ): T | null =&amp;gt; arr.length === 0 ? null : arr[0]; Extends trick const firstOrNull = &amp;lt;T extends unknown&amp;gt;( arr: T[] ): T | null =&amp;gt; arr.length === 0 ? null : arr[0]; Comma trick const firstOrNull = &amp;lt;T,&amp;gt;( arr: T[] ): T | null =&amp;gt; arr.</description></item><item><title>升級 javascript 到 typescript</title><link>https://aryung.github.io/posts/2022-05-12-upgrade-functional-programming-to-typescript/</link><pubDate>Thu, 12 May 2022 09:30:06 +0800</pubDate><guid>https://aryung.github.io/posts/2022-05-12-upgrade-functional-programming-to-typescript/</guid><description>楔子 typescript 針對 javascript 有進行型別的補強，在 functional programming 的 lib 中，有 fp-ts 可以使用，不過個人覺的它有點複雜變的不太好用，它的型別有點太多了，先了解它的東西應該就飽了，那今天來試試改用小刀水平的 javascript 吧。
說明 先要熟悉一下 arrow function 的 typescript 有點不易閱讀(官網也這樣說)
這是一個取第一個值的簡單函數
let fst: (a: any, b: any) =&amp;gt; any = (a, b) =&amp;gt; a 如果套上括號(弄個特殊的括號 [ ] )，應該就可以比較好懂這個格式了。
let fst: [(a: any, b: any) =&amp;gt; any] = (a, b) =&amp;gt; a
比較容易理解的還是用純 function 來寫
function fst(a: any, b: any): any { return a } 如果再套上 Generic types 的表達格式
function fst&amp;lt;T,U&amp;gt;(a: T, b: U): T { return a } 接下來開始改造 lib 升級到 typescript 先從小的東西開始，如果原來的 javascript</description></item></channel></rss>